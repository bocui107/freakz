ifndef CONTIKI
  ${error CONTIKI not defined! You must specify where CONTIKI resides!}
endif

LINT = lint-nt
STD_LINT = $(ROOT_DIR)/lint/std.lnt

OBJECTDIR = obj_$(TARGET)
CFLAGS += -DCONTIKI_TARGET=$(TARGET) -fpack-struct

ifeq ($(TARGET),)
  -include Makefile.target
  ifeq ($(TARGET),)
    ifeq ($(DEFAULT_TARGET),)
      DEFAULT_TARGET=native
    endif
    ${warning TARGET not defined, using target '$(DEFAULT_TARGET)'}
    TARGET=$(DEFAULT_TARGET)
  else
    ${warning using saved target '$(TARGET)'}
  endif
endif

usage:
	@echo "make MAKETARGETS... [TARGET=(TARGET)] [savetarget] [targets]"

targets:
	@ls -1 $(CONTIKI)/platform | grep -v CVS

savetarget:
	-@rm -f Makefile.target
	@echo >Makefile.target "TARGET = $(TARGET)"

ifeq (${wildcard $(OBJECTDIR)},)
DUMMY := ${shell mkdir $(OBJECTDIR)}
endif

include $(CONTIKI)/../freakz/Makefile.freakz

SYSTEM  = process.c procinit.c autostart.c profile.c profile-aggregates.c
LIBS    = memb.c timer.c list.c etimer.c energest.c rtimer.c ctimer.c mmem.c

CONTIKIFILES = $(SYSTEM) $(LIBS)

CONTIKI_SOURCEFILES += $(CONTIKIFILES)

CONTIKIDIRS += ${addprefix $(CONTIKI)/core/,dev lib sys \
                  loader . }

oname = ${patsubst %.c,%.o,${patsubst %.S,%.o,$(1)}}

CONTIKI_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(CONTIKI_SOURCEFILES)}}

PROJECT_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(PROJECT_SOURCEFILES)}}

CONTIKI_ASMOBJECTFILES = ${addprefix $(OBJECTDIR)/,$(CONTIKI_ASMFILES:.S=.o)}

### Include application makefiles

ifdef APPS
  APPDIRS += ${addprefix $(CONTIKI)/apps/, $(APPS)}
  APPINCLUDES = ${foreach APP, $(APPS), $(CONTIKI)/apps/$(APP)/Makefile.$(APP)}
  -include $(APPINCLUDES)
  APP_SOURCES = ${foreach APP, $(APPS), $($(APP)_src)}
  DSC_SOURCES = ${foreach APP, $(APPS), $($(APP)_dsc)}
  CONTIKI_SOURCEFILES += $(APP_SOURCES) $(DSC_SOURCES)
endif

### Include target makefile (TODO Unsafe?)

target_makefile := $(wildcard $(CONTIKI)/platform/$(TARGET)/Makefile.$(TARGET))

# Check if the target makefile exists
ifeq ($(strip $(target_makefile)),)
  ${error The target platform "$(TARGET)" does not exist (maybe it was misspelled?)}
else
  include $(CONTIKI)/platform/$(TARGET)/Makefile.$(TARGET)
endif

### Setup directory search path for source and header files

CONTIKI_TARGET_DIRS_CONCAT = ${addprefix $(CONTIKI)/platform/$(TARGET)/, \
                               $(CONTIKI_TARGET_DIRS)}
CONTIKI_CPU_DIRS_CONCAT    = ${addprefix $(CONTIKI_CPU)/, \
                               $(CONTIKI_CPU_DIRS)}

SOURCEDIRS += $(PROJECTDIRS) $(CONTIKI_TARGET_DIRS_CONCAT) \
             $(CONTIKI_CPU_DIRS_CONCAT) $(CONTIKIDIRS) $(APPDIRS)

vpath %.c $(SOURCEDIRS)
vpath %.S $(SOURCEDIRS)

CFLAGS += ${addprefix -I,$(SOURCEDIRS)}

### Automatic dependency generation

ifneq ($(MAKECMDGOALS),clean)
-include ${addprefix $(OBJECTDIR)/,$(CONTIKI_SOURCEFILES:.c=.d) \
                                   $(PROJECT_SOURCEFILES:.c=.d)}
endif

clean:
	rm -f *~ *core core *.srec \
	*.lst *.map \
        *.cprg *.bin *.data contiki*.a *.firmware core-labels.S *.ihex *.ini \
        *.ce *.co $(CLEAN)
	-rm -rf $(OBJECTDIR)

lint: $(CONTIKI_SOURCEFILES)
	$(LINT) $(STD_LINT) $^

ifndef CUSTOM_RULE_C_TO_CE
%.ce: %.c
	$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@
endif

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
endif

ifndef CUSTOM_RULE_S_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.S
	$(AS) $(ASFLAGS) -o $@ $<
endif

ifndef CUSTOM_RULE_C_TO_O
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
endif

ifndef CUSTOM_RULE_C_TO_CO
%.co: %.c
	$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@
endif

ifndef AROPTS
  AROPTS = rcf
endif

ifndef CUSTOM_RULE_ALLOBJS_TO_TARGETLIB
contiki-$(TARGET).a: $(CONTIKI_OBJECTFILES)
	$(AR) $(AROPTS) $@ $^
endif

ifndef CCDEP
  CCDEP = $(CC)
endif
ifndef CDEPFLAGS
  CDEPFLAGS = $(CFLAGS)
endif

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_D
$(OBJECTDIR)/%.d: %.c
	@echo Making dependencies for $<; set -e; rm -f $@; \
	$(CCDEP) -MM $(CDEPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(OBJECTDIR)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$
endif

ifndef LD
  LD = $(CC)
endif

ifndef CUSTOM_RULE_LINK
  ifdef TEST_RAVEN_USB
  # Needed for AVR Studio. They need a target with the same name as the project. ack!
  %.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a
	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
	  cp test_avr_ravenusb.$(TARGET) test_avr_ravenusb.elf
  else
    ifdef TEST_RAVEN
    # Needed for AVR Studio. They need a target with the same name as the project. ack!
    %.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a
	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
	  cp test_avr_raven.$(TARGET) avr_raven.elf
    else
    %.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a
	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
    endif
  endif
endif

# Don't treat %.$(TARGET) as an intermediate file because it is
# in fact the primary target.
.PRECIOUS: %.$(TARGET)

# Cancel the predefined implict rule for compiling and linking
# a single C source into a binary to force GNU make to consider
# the match-anything rule below instead.
%: %.c

# Match-anything pattern rule to allow the project makefiles to
# abstract from the actual binary name. It needs to contain some
# command in order to be a rule, not just a prerequisite.
%: %.$(TARGET)
	@

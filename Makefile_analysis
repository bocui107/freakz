CONTIKI = ../os
ZIGBEE_PATH = ../freakz
ROOT_DIR = ..
FREAKUSB_PATH = ../freakusb

TEST_RAVEN_USB = 1
TARGET = avr-ravenusb

all: test_avr_ravenusb

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call oname, $(CONTIKI_SOURCEFILES)}}
CFLAGS += -DTEST_RAVENUSB
SOURCEDIRS += .
CONTIKI_SOURCEFILES += test_zdo.c test_zcl.c test_data.c test_app.c
CONTIKIDIRS += . $(FREAKUSB_PATH)




# os/Makefile.include
CFLAGS += -DUIP_CONF_IPV6=1

HOST_OS := $(shell uname)

usage:
	@echo "make MAKETARGETS... [TARGET=(TARGET)] [savetarget] [targets]"

targets:
	@ls -1 $(CONTIKI)/platform $(TARGETDIRS) | grep -v CVS

savetarget:
	-@rm -f Makefile.target
	@echo "saving Makefile.target"
	@echo >Makefile.target "TARGET = $(TARGET)"

savedefines:
	-@rm -f Makefile.$(TARGET).defines
	@echo "saving Makefile.$(TARGET).defines"
	@echo >Makefile.$(TARGET).defines "DEFINES = $(DEFINES)"



# freakz/Makefile.freakz

ZIGBEE  = freakz.c \
	  zcl.c zcl_parse.c zcl_gen.c zcl_rpt.c zcl_basic.c zcl_on_off.c zcl_id.c zcl_level.c \
	  zdo.c zdo_nwk_mgr.c zdo_disc.c zdo_cfg.c zdo_gen.c zdo_parse.c zdo_bind_mgr.c \
	  af.c af_ep.c af_conf.c af_conf_tbl.c af_rx.c af_tx.c \
	  aps.c aps_gen.c aps_parse.c aps_retry.c aps_dupe.c aps_bind.c aps_grp.c \
	  nwk.c nwk_gen.c nwk_parse.c nwk_reset.c nwk_sync.c \
	  nwk_rte_mesh.c nwk_rte_disc_tbl.c nwk_rte_tbl.c nwk_pend.c nwk_form.c nwk_permit_join.c \
	  nwk_neighbor_tbl.c nwk_rte_tree.c nwk_brc.c nwk_disc.c nwk_join.c nwk_leave.c nwk_addr_map.c \
	  mac.c mac_gen.c mac_parse.c mac_indir.c mac_queue.c mac_start.c mac_reset.c \
	  mac_scan.c mac_assoc.c mac_poll.c mac_retry.c \
	  buf.c debug.c misc.c slow_clock.c mem_heap.c \

ZIGBEE_SOURCEFILES += $(ZIGBEE)
ZIGBEEDIRS += $(ZIGBEE_PATH) $(TEST_DIR) ${addprefix $(ZIGBEE_PATH)/, af zdo aps nwk mac test misc zcl zcl/general}
ZIGBEE_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(ZIGBEE_SOURCEFILES)}}

SOURCEDIRS += $(ZIGBEEDIRS)
CONTIKI_SOURCEFILES += $(ZIGBEE_SOURCEFILES)
PROJECT_OBJECTFILES += $(ZIGBEE_OBJECTFILES)
CONTIKIDIRS += $(ZIGBEEDIRS)

#end freakz/Makefile.freakz

OBJECTDIR = obj_$(TARGET)

LOWERCASE = -abcdefghijklmnopqrstuvwxyz
UPPERCASE = _ABCDEFGHIJKLMNOPQRSTUVWXYZ
TARGET_UPPERCASE := ${strip ${shell echo $(TARGET) | sed y!$(LOWERCASE)!$(UPPERCASE)!}}
CFLAGS += -DCONTIKI=1 -DCONTIKI_TARGET_$(TARGET_UPPERCASE)=1

MODULES += core/sys core/dev core/lib

CONTIKI_SOURCEFILES += $(CONTIKIFILES)

CONTIKIDIRS += ${addprefix $(CONTIKI)/core/,dev lib net net/mac net/rime \
                 net/rpl sys cfs ctk lib/ctk loader . }

oname = ${patsubst %.c,%.o,${patsubst %.S,%.o,$(1)}}

CONTIKI_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(CONTIKI_SOURCEFILES)}}

PROJECT_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(PROJECT_SOURCEFILES)}}

# Provide way to create $(OBJECTDIR) if it has been removed by make clean
$(OBJECTDIR):
	mkdir $@

uniq = $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1)))

### Include target makefile (TODO Unsafe?)

target_makefile := $(wildcard $(CONTIKI)/platform/$(TARGET)/Makefile.$(TARGET) ${foreach TDIR, $(TARGETDIRS), $(TDIR)/$(TARGET)/Makefile.$(TARGET)})

# os/platform/avr-ravenusb/Makefile.avr-ravenusb
CONTIKI_TARGET_DIRS = . rf230 apps net loader
CONTIKI_CORE=contiki-raven-main
CONTIKI_TARGET_MAIN = ${CONTIKI_CORE}.o
CONTIKIAVR=$(CONTIKI)/cpu/avr

CONTIKI_TARGET_SOURCEFILES += mmem.c contiki-raven-default-init-lowlevel.c contiki-raven-main.c

# Source for FreakUSB
# freakusb/demo/contiki_usb/Makefile.freakusb

FREAKUSB  = freakusb_main.c cdc.c desc.c ep.c hw.c isr.c usb_buf.c usb.c ctrl.c \

FREAKUSBDIRS += $(FREAKUSB_PATH) ${addprefix $(FREAKUSB_PATH)/, demo/contiki_usb class/cdc hw/at90usb usb }
FREAKUSB_OBJFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(FREAKUSB)}}

SOURCEDIRS += $(FREAKUSB)
CONTIKI_SOURCEFILES += $(FREAKUSB)
PROJECT_OBJECTFILES += $(FREAKUSB_OBJFILES)
CONTIKIDIRS += $(FREAKUSBDIRS)
#end freakusb/demo/contiki_usb/Makefile.freakusb

# Source for AT86RF230
# freakz/driver/avr_at86rf/Makefile.rf230
CONTIKI_TARGET_SOURCEFILES += hal.c drvr_avr_at86.c mac_hw.c

APPDS += $(ZIGBEE_PATH)/driver/avr_at86rf
#end freakz/driver/avr_at86rf/Makefile.rf230

include $(CONTIKIAVR)/Makefile.avr
# os/cpu/avr/Makefile.avr
.SUFFIXES:

### Optimization setting. $make OPTI=0 for easier debugging of changed source file(s)
ifndef OPTI
  OPTI=s
endif

### Define the CPU directory of the AVR port
CONTIKI_CPU=$(CONTIKI)/cpu/avr

### These directories will be searched for the specified source files
### TARGETLIBS are platform-specific routines in the contiki library path
AVR        = random.c
TARGETLIBS = clock.c flash.c

CONTIKI_TARGET_SOURCEFILES += ${AVR} $(SENSORS) \
                              $(SYSAPPS) \
                              $(TARGETLIBS)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)


### Compiler definitions
CC       = avr-gcc
LD       = avr-gcc
AS       = avr-as
AR       = avr-ar
ELF_SIZE = avr-size -C --mcu=$(MCU)
OBJCOPY  = avr-objcopy
STRIP    = avr-strip
CFLAGSNO = -Wall -mmcu=$(MCU) -gdwarf-2 -fno-strict-aliasing \
            -I$(CONTIKI)/platform/$(TARGET) \
            -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) $(USB_INCLUDES) \
            $(CONTIKI_PLAT_DEFS)
CFLAGS   += $(CFLAGSNO) -O$(OPTI)

ifndef BOOTLOADER_START
  BOOTLOADER_START = 0x1F800
endif

LDFLAGS  += -mmcu=$(MCU) -Wl,-Map=contiki-$(TARGET).map \
           -Wl,--section-start=.bootloader=$(BOOTLOADER_START)

SMALL ?= 1

### These flags help significantly reduce the code size
ifeq ($(SMALL),1)
CFLAGS += -ffunction-sections
CFLAGS += -fdata-sections
LDFLAGS += -Wl,--gc-sections
endif # SMALL

### Compilation rules

$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.ko: %.o
	$(STRIP) -K _init -K _fini --strip-unneeded -g -x $< -o $@

%.elf:	%.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a symbols.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(filter-out %.a,$^) $(filter %.a,$^) $(LDLIBS)
#Allow top-level makefile to always show size even when build is up to date
ifndef NOAVRSIZE
	avr-size -C --mcu=$(MCU) $@
endif

%.hex: %.out
	$(OBJCOPY) $^ -j .text -j .data -O ihex $@

%.ihex: %.out
	$(OBJCOPY) $^ -O ihex $@

# Add a namelist to the kernel
%.out: %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $^ $(LIBC) symbols.c
ifdef SYMBOLS
	$(CONTIKI)/tools/avr-make-symbols $@
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $^ $(LIBC) symbols.c
	$(CONTIKI)/tools/avr-make-symbols $@
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $^ $(LIBC) symbols.c
endif

#%.hex: %.elf
#	$(OBJCOPY) -R .eeprom -R .fuse -R .signature $^ -O ihex $@

%.eep: %.out
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O ihex $^ $@


%-stripped.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

#%.ce: %.c
#	$(CC) $(CFLAGS) -c $< -o $@
#	$(STRIP) --strip-unneeded -g -x $@

#%.ce: 	%.co
#	$(LD) -i -r --unresolved-symbols=ignore-in-object-files -mavr5 -o $@ $^
#	$(STRIP) --strip-unneeded -g -x $@

%.co: %.c
	cp $(CONTIKI)/tools/empty-symbols.c symbols.c
	cp $(CONTIKI)/tools/empty-symbols.h symbols.h
	$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -g -x -o $@ $<

%.o: ${CONTIKI_TARGET}/loader/%.S
	$(AS) -o $(notdir $(<:.S=.o)) $<

%.srec: %.$(TARGET)
	$(OBJCOPY) -O srec $< $@

### Upload image
#Let avrdude use defaults if port or programmer not defined
AVRDUDE ?= avrdude
ifdef AVRDUDE_PORT
AVRDUDE_PORT:=-P $(AVRDUDE_PORT)
endif

ifdef AVRDUDE_PROGRAMMER
AVRDUDE_PROGRAMMER:=-c $(AVRDUDE_PROGRAMMER)
endif

ifdef AVRDUDE_MCU
AVRDUDE_MCU:=-p $(AVRDUDE_MCU)
else
AVRDUDE_MCU:=-p $(MCU)
endif

%.u: %.hex
	$(AVRDUDE) $(AVRDUDE_MCU) $(AVRDUDE_OPTIONS) $(AVRDUDE_PORT) $(AVRDUDE_PROGRAMMER) -U flash:w:$<

%.eu: %.eep
	$(AVRDUDE) $(AVRDUDE_MCU) ${AVRDUDE_OPTIONS} ${AVRDUDE_PORT} ${AVRDUDE_PROGRAMMER} -U eeprom:w:$<

symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h

# end os/cpu/avr/Makefile.avr


CONTIKIBOARD=.

CONTIKI_PLAT_DEFS = -DF_CPU=8000000UL -DAVRGCC -DAUTO_CRC_PADDING=2 -DJACKDAW=1 -DAT86RF=1

MCU=at90usb1287
AVRDUDE_PROGRAMMER=jtag2

# For usb devices, you may either use PORT=usb, or (e.g. if you have more than one
# programmer connected) you can use the following trick to find out the serial number:
#
# The example is for an JTAGICE mkII used to program an ATmega128:
# avrdude -v -P usb:xxxx -c jtag2 -p atmega128
AVRDUDE_PORT=usb:00B000000D79

# Additional avrdude options
# Verify off
AVRDUDE_OPTIONS=-V

#end os/platform/avr-ravenusb/Makefile.avr-ravenusb

# Check if the target makefile exists, and create the object directory if necessary.
ifeq ($(strip $(target_makefile)),)
  ${error The target platform "$(TARGET)" does not exist (maybe it was misspelled?)}
else
  ifneq (1, ${words $(target_makefile)})
    ${error More than one TARGET Makefile found: $(target_makefile)}
  endif
  include $(target_makefile)
endif

ifdef MODULES
  UNIQUEMODULES = $(call uniq,$(MODULES))
  MODULESSUBST = ${subst /,-,$(UNIQUEMODULES)}
  MODULEDIRS = ${wildcard ${addprefix $(CONTIKI)/, $(UNIQUEMODULES)}}
  MODULES_SOURCES = ${foreach d, $(MODULEDIRS), ${subst ${d}/,,${wildcard $(d)/*.c}}}
  CONTIKI_SOURCEFILES += $(MODULES_SOURCES)
  APPDS += $(MODULEDIRS)
endif

### Verbosity control. Use  make V=1  to get verbose builds.

ifeq ($(V),1)
  TRACE_CC =
  TRACE_LD =
  TRACE_AR =
  TRACE_AS =
  Q=
else
  TRACE_CC = @echo "  CC       " $<
  TRACE_LD = @echo "  LD       " $@
  TRACE_AR = @echo "  AR       " $@
  TRACE_AS = @echo "  AS       " $<
  Q=@
endif

### Forward comma-separated list of arbitrary defines to the compiler

COMMA := ,
CFLAGS += ${addprefix -D,${subst $(COMMA), ,$(DEFINES)}}

### Setup directory search path for source and header files

CONTIKI_TARGET_DIRS_CONCAT = ${addprefix ${dir $(target_makefile)}, \
                               $(CONTIKI_TARGET_DIRS)}
CONTIKI_CPU_DIRS_CONCAT    = ${addprefix $(CONTIKI_CPU)/, \
                               $(CONTIKI_CPU_DIRS)}

SOURCEDIRS = . $(PROJECTDIRS) $(CONTIKI_TARGET_DIRS_CONCAT) \
             $(CONTIKI_CPU_DIRS_CONCAT) $(CONTIKIDIRS) $(APPDS) ${dir $(target_makefile)}

vpath %.c $(SOURCEDIRS)
vpath %.S $(SOURCEDIRS)

CFLAGS += ${addprefix -I,$(SOURCEDIRS) $(CONTIKI)}

### Check for a git repo and pass version if found
### git.exe in Windows cmd shells may require no stderr redirection
#RELSTR=${shell git describe --tags}
RELSTR=${shell git --git-dir ${CONTIKI}/.git describe --tags 2>/dev/null}
ifneq ($(RELSTR),)
CFLAGS += -DCONTIKI_VERSION_STRING=\"Contiki-$(RELSTR)\"
endif

### Automatic dependency generation

ifneq ($(MAKECMDGOALS),clean)
-include ${addprefix $(OBJECTDIR)/,$(CONTIKI_SOURCEFILES:.c=.d) \
                                   $(PROJECT_SOURCEFILES:.c=.d)}
endif

### See http://make.paulandlesley.org/autodep.html#advanced

define FINALIZE_DEPENDENCY
cp $(@:.o=.d) $(@:.o=.$$$$); \
sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \
rm -f $(@:.o=.$$$$)
endef

clean:
	-rm -f *~ *core core *.srec \
	*.lst *.map \
	*.cprg *.bin *.data contiki*.a *.firmware core-labels.S *.ihex *.ini \
	*.ce *.co
	rm -rf $(CLEAN)
	-rm -rf $(OBJECTDIR)

distclean: clean
	-rm -f ${addsuffix .$(TARGET),$(CONTIKI_PROJECT)}

-include $(CONTIKI)/platform/$(TARGET)/Makefile.customrules-$(TARGET)

ifndef CUSTOM_RULE_C_TO_CE
%.ce: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@
endif

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)

ifndef CUSTOM_RULE_S_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)
	$(TRACE_AS)
	$(Q)$(AS) $(ASFLAGS) -o $@ $<
endif

ifndef CUSTOM_RULE_C_TO_O
%.o: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@
endif


ifndef CUSTOM_RULE_C_TO_CO
%.co: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@
endif

ifndef AROPTS
  AROPTS = rcf
endif

ifndef CUSTOM_RULE_ALLOBJS_TO_TARGETLIB
contiki-$(TARGET).a: $(CONTIKI_OBJECTFILES)
	$(TRACE_AR)
	$(Q)$(AR) $(AROPTS) $@ $^
endif

ifndef LD
  LD = $(CC)
endif

ifndef CUSTOM_RULE_LINK
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} \
	    ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
endif

%.ramprof: %.$(TARGET)
	$(NM) -S -td --size-sort $< | grep -i " [abdrw] " | cut -d' ' -f2,4

%.flashprof: %.$(TARGET)
	$(NM) -S -td --size-sort $< | grep -i " [t] " | cut -d' ' -f2,4

# Don't treat %.$(TARGET) as an intermediate file because it is
# in fact the primary target.
.PRECIOUS: %.$(TARGET)

# Cancel the predefined implict rule for compiling and linking
# a single C source into a binary to force GNU make to consider
# the match-anything rule below instead.
%: %.c

# Match-anything pattern rule to allow the project makefiles to
# abstract from the actual binary name. It needs to contain some
# command in order to be a rule, not just a prerequisite.
%: %.$(TARGET)

1. mac_gen_header
一边计算长度一边填充缓冲区

2.

int pthread_create(pthread_t*restrict tidp,const pthread_attr_t *restrict_attr,
void*(*start_rtn)(void*),void *restrict arg);
返回值: 若成功则返回0，否则返回出错编号

返回成功时, 由tidp指向的内存单元被设置为新创建线程的线程ID. attr参数用于指定各种不同的线程属性.
新创建的线程从start_rtn函数的地址开始运行, 该函数只有一个万能指针参数arg,
如果需要向start_rtn函数传递的参数不止一个, 那么需要把这些参数放到一个结构中,
然后把这个结构的地址作为arg的参数传入.

解决了一个隐蔽的内存泄漏——pthread_create后没有detach导致内存持续增长

昨天解决了一个隐蔽的内存泄漏问题，原因是pthread_create后的僵死线程没有释放导致的内存持续增长。
现象是这样的: 短时间内程序运行正常, 但跑了12小时左右, 用top查看其内存占用居然高达2G,
于是马上意识到有内存泄漏.

最先想到的是malloc/free, new/delete没有配对, 申请的内存没有释放. 于是写了个跟踪malloc/free调用的模块,
不过检查中并没有找到未释放的内存. 之后怀疑是不是free then malloc导致的内存管理错误(事实证明虽然free后
不是立即回收内存, 但是接连调用free & malloc并不会影响操作系统的内存管理), 不过写了个小程序发现并不是
这么回事.

陷入窘境了, 只好用最小系统法把功能部分和内存分配都给屏蔽掉, 这时发现内存泄漏依然存在！仔细看top的输出,
几乎是每次创建线程时内存就往上涨一点，只是增长速度不是很快, 看来是线程的问题了. 仔细分析发现,
之前图简单 pthread_create (&thread, NULL, &thread_function, NULL); 就这么写了,
参数2没有设置线程结束后自动detach, 并且没有使用pthread_join或pthread_detach释放执行结束后线程的空间.


Linux man page 里有已经说明了这个问题:
    When a joinable thread terminates, its memory resources (thread descriptor and stack) are not deallocated until another thread performs pthread_join on it. Therefore, pthread_join must be called  once  for each joinable thread created to avoid memory leaks.

也就说线程执行完后如果不join的话，线程的资源会一直得不到释放而导致内存泄漏！一时的图快后患无穷啊。


3. 进程间通信--命名管道
一. 命名管道的概念
管道的一个不足之处是没有名字, 因此只能用于具有亲缘关系的进程间通信, 在命名管道(named pipe或FIFO)
提出后, 该限制得到了克服. FIFO不同于管道之处在于它提供一个路径名与之关联, 以FIFO的文件形式存储于
文件系统中. 命名管道是一个设备文件, 因此即使进程与创建FIFO的进程不存在亲缘关系, 只要可以访问该路径,
就能够通过FIFO相互通信. 值得注意的是, FIFO(first input first output)总是按照先进先出的原则工作,
第一个被写入的数据将首先从管道中读出.

二. 命名管道的创建与读写

Linux下有两种方式创建命名管道. 一是在Shell下交互地建立一个命名管道, 二是在程序中使用系统函数建立
命名管道. Shell方式下可使用mknod或mkfifo命令, 下面命令使用mknod创建了一个命名管道:
mknod namedpipe

创建命名管道的系统函数有两个: mknod和mkfifo. 两个函数均定义在头文件sys/stat.h，函数原型如下：
#include <sys/types.h>
#include <sys/stat.h>
int mknod(const char *path, mode_t mod, dev_t dev);
int mkfifo(const char *path, mode_t mode);

函数mknod参数中path为创建的命名管道的全路径名: mod为创建的命名管道的模式, 指明其存取权限;
dev为设备值, 该值取决于文件创建的种类, 它只在创建设备文件时才会用到.

这两个函数调用成功都返回0, 失败都返回 -1. 下面使用mknod函数创建了一个命名管道:
umask(0);
if (mknod("/tmp/fifo", S_IFIFO | 0666) == -1)
{
	perror("mkfifo error");
	exit(1);
}

函数mkfifo前两个参数的含义和mknod相同. 下面是使用mkfifo的示例代码:
umask(0);
if (mkfifo("/tmp/fifo", S_IFIFO|0666) == -1)
{
	perror("mkfifo error!");
	exit(1);
}

"S_IFIFO | 0666" 指明创建一个命名管道且存取权限为0666, 即创建者, 与创建者同组的用户,
其他用户对该命名管道的访问权限都是可读可写.

命名管道创建后就可以使用了, 命名管道和管道的使用方法基本是相同的. 只是使用命名管道时,
必须先调用open()将其打开. 因为命名管道是一个存在于硬盘上的文件，而管道是存在于内存中
的特殊文件.

需要注意的是, 调用open()打开命名管道的进程可能会被阻塞. 但如果同时用读写方式(O_RDWR)打开,
则一定不会导致阻塞; 如果以只读方式(O_RDONLY)打开, 则调用open()函数的进程将会被阻塞直到有
写方打开管道; 同样以写方式(O_WRONLY)打开也会阻塞直到有读方式打开管道.

管道的读取和写入

从管道中读取:

希望从管道中读取数据的进程发出一个read()系统调用, 内核最终调用与这个文件描述符相关的文件
操作表中所找到的read方法, 对于管道, read方法在read_pipe_fops表中指向pipe_read()函数.

当出现下面的情况时, 读操作会阻塞:

(1) 系统调用开始时管道缓冲区为空.
(2) 管道缓冲区没有包含所有请求的字节, 写进程在等待缓冲区的空间时曾被置为睡眠.

当然，通过fcntl()系统调用也可以把对管道的读操作设置为非阻塞的.

向管道中写入:

希望向管道中写入数据的进程发出一个write()系统调用, 和读取类似,
内核最终会调用pipe_write()函数.

需要注意的是, 如果有两个或者多个进程并发地在写入一个管道, 那么任何少于一个管道
缓冲区大小的写操作都必须单独(原子地)完成, 而不能与其它进程交叉进行.

FIFO

在Linux中, FIFO和管道几乎是相同的, 除了:

FIFO索引节点出现在系统目录树上而不是pipefs特殊文件系统中.
FIFO是一种双向通信管道; 也就是说, 可以以读/写模式打开一个FIFO.

打开一个FIFO时, VFS首先判断到这个文件是特殊的FIFO类型文件, 然后找到针对这种文件
的操作函数表, 在使用表中对应的函数对FIFO进行操作.


pthread_cond_wait() 用于阻塞当前线程, 等待别的线程使用pthread_cond_signal()
或pthread_cond_broadcast来唤醒它. pthread_cond_wait()必须与pthread_mutex配套使用.

pthread_cond_wait()函数一进入wait状态就会自动release mutex. 当其他线程通过
pthread_cond_signal()或pthread_cond_broadcast, 把该线程唤醒, 使pthread_cond_wait()
通过(返回)时, 该线程又自动获得该mutex.

pthread_cond_signal函数的作用是发送一个信号给另外一个正在处于阻塞等待状态的线程,
使其脱离阻塞状态, 继续执行. 如果没有线程处在阻塞等待状态, pthread_cond_signal也会成功返回.

使用pthread_cond_signal一般不会有"惊群现象"产生, 他最多只给一个线程发信号. 假如有多个
线程正在阻塞等待着这个条件变量的话，那 么是根据各等待线程优先级的高低确定哪个线程接收
到信号开始继续执行. 如果各线程优先级相同, 则根据等待时间的长短来确定哪个线程获得信号.
但无论如何一个pthread_cond_signal调用最多发信一次.

但是pthread_cond_signal在多处理器上可能同时唤醒多个线程, 当你只能让一个线程处理某个
任务时, 其它被唤醒的线程就需要继续wait, 而且规范要求pthread_cond_signal至少唤醒一个
pthread_cond_wait上的线程, 其实有些实现为了简单在单处理器上也会唤醒多个线程.

另外, 某些应用, 如线程池, pthread_cond_broadcast唤醒全部线程, 但我们通常只需要一部分
线程去做执行任务, 所以其它的线程需要继续wait.所以强烈推荐对pthread_cond_wait()
使用while循环来做条件判断
